datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  contacts      Contact[]     @relation("reciever-relation")
  accounts      Account[]
  sessions      Session[]
  Requests      Request[]     @relation("request-relation")
  devices       Device[]
  Contact       Contact[]
  Request       Request[]
  ChatMessageSender   ChatMessage[] @relation("sender")
  ChatMessageReciever   ChatMessage[] @relation("reciever")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contact {
  receiver   User   @relation("reciever-relation", fields: [recieverId], references: [id])
  recieverId String
  User       User   @relation(fields: [userId], references: [id])
  userId     String

  @@id([recieverId, userId])
}

model Request {
  // User receiving the request
  receiver   User   @relation("request-relation", fields: [receiverId], references: [id])
  receiverId String

  // User sending the request
  sender   User   @relation(fields: [senderId], references: [id])
  senderId String

  @@id([receiverId, senderId])
}

model Device {
  User     User?  @relation(fields: [userId], references: [id])
  userId   String
  deviceId String

  @@unique([deviceId, userId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  timestamp DateTime @default(now())

  sender   User   @relation("sender", fields: [senderId], references: [id])
  senderId String

  receiver   User    @relation("reciever", fields: [receiverId], references: [id])
  receiverId String

  @@index([senderId], name: "sender_idx")
  @@index([receiverId], name: "receiver_idx")
}